1. Add Vertex
Function Prototype:
 void Graph::addVertex(string)

 Function Description:
 This method takes in a name for a landmark and checks to make sure a vertex has not   already been associate with that name. If it has not, it will create
 a new vertex with the name and add it to the vertices vector

 Example:
 Graph g;
 g.addVector("Eiffel Tower");

 Precondition: Vector class must be included. The string parameter has no extra spaces, and is the correct name of the landmark. The struct vertex has been declared with name and distance variables.
 The vertices vector has been declared.

 Postcondition: The string name given will be created into a vertex and added to the vertices vector. If the name was already created as a vector the program will say that name was found.

2. Add Edge
 Function Prototype:
 void Graph::addEdge(string, string, int)

 Function Description:
 This method takes in two names for landmarks, finds if the two names correspond to vertices, and adds an edge between
 the vertices with the corresponding parameter for weight.

 Example:
 Graph g;
 g.addEdge("Eiffel Tower", "Taj Mahal", 2000);

 Precondition: Vector class must be included. The vertices vector and the adjacent vector have been declared. The struct for adjVertex has been initialized with a pointer to the vector and the weight.
 If no movies have been added to the vertices vector, then v1 and v2 will not be found. The starting landmark is string v1 and the ending landmark is v2.
 The weight between the landmarks will be given by int weight. All this information can be found in the generated text file.

 Postcondition: An edge will be added between the two vertices with the corresponding weight. The adjacent vector for v1 will have v2 added, and the adjacent vector
 for v2 will have v1 added. The edge will be created in both directions.

3. Breadth First Search
Function Prototype:
 void Graph::breadthFirstSearch(string, string)

 Function Description:
 This method takes in two parameters and returns the shortest path between the two cities

 Example:
 Graph g;
 g.breadthFirstSearch("Stonehenge", "Golden Gate Bridge");

 Precondition: Vector class must be included. The vertices vector has to be declared and the vertex struct has to be declared and initialized with the corresponding variables. The adjacent vertices vector/struct has to
 be declared as well with the pointer to the vertex struct. The queue class has to be included.

 Postcondition: Display the integer for the shortest path, and the string representation of the path taken

4. Depth First Traversal 
Function Prototype:
 void Graph::depthFirstTraversal(string)

 Function Description: This method prints all the vertices according to the 'depth first' traversal procedure

 Example:
 Graph g;
 g.depthFirstTraversal("Eiffel Tower");

 Precondition: Vector class must be included. The vertices vector has to be initialized as well as the vertex struct. The stack class has to be included and the adjacent vector/struct has to be declared and initialized
 with corresponding variables.

 Postcondition: Will display all the vertices in the graph, in order according to depth first traversal

5. Depth First Traversal Recursive
Function Prototype:
 void Graph::depthFirstTraversalRecursive(string)

 Function Description: This method prints all the vertices according to the 'depth first' recursive traversal procedure

 Example:
 Graph g;
 g.depthFirstTraversalRecursive("Eiffel Tower");

 Precondition: Vector class must be included. The search method must be implemented. The vertices vector and vertex struct must be declared and initialized with the corresponding variables.
 The adjacent vector/struct must be implemented with the corresponding variables.

 Postcondition: Will display all the vertices in the graph, in order according to depth first recursive traversal

6. Search
Function Prototype:
 void Graph::search(vertex)

 Function Description: This method prints all the adjacent vertices according to the 'depth first' recursive traversal procedure

 Example:
 Graph g;
 search(*startingLandmark->adj[i].v) [This is a private method so it does not need to be called from graph g]

 Precondition: Vector class must be included. The depth first recursive traversal must be implemented as well as the vertex struct and vertices vector with corresponding variables.
 The adjacent vector and struct must be declared and implemented for each vector.

 Postcondition: Will display all the vertices in the graph, in order according to depth first recursive traversal

7. Breadth First Traversal
Function Prototype:
 void Graph::breadthFirstTraversal(string)

 Function Description: This method prints all the vertices according to the 'breadth first' traversal procedure

 Example:
 Graph g;
 g.breadthFirstTraversal("Eiffel Tower");

 Precondition: Vector class must be included. The vertices vector and vertex struct must be declared and initialized with the corresponding variables.
 The adjacent vector/struct must be implemented with the corresponding variables. The queue class must be included.

 Postcondition: Will display all the vertices in the graph, in order according to breadth first traversal

8. Dijkstra
Function Prototype:
 void Graph::dijkstra(string, string)

 Function Description: This method will find the shortest distance between two landmarks in a weighted graph.

 Example:
 Graph g;
 g.dijkstra("Niagara Falls", "Eiffel Tower");

 Precondition: Vector class must be included. The vertex struct and vertices vector must be implemented will all corresponding variables including the pointer to the previous vertex.
 The vector class must be included and the adjacent vector/struct must be declared and implemented. The limits.h class must be included.

 Postcondition: Will print the shortest distance between two landmarks and the string path taken between the landmarks.

9. Find Districts
Function Prototype:
 void Graph::findDistricts(string)

 Function Description: This method will assign all connected components a district. Initially, all landmarks are connect, however,
 some landmarks may be deleted.

 Example:
 Graph g;
 g.findDistricts("Golden Gate Bridge");

 Precondition: Vector class must be included. The vertex struct must be initialized with all corresponding variables. All vertices must have a variable to store district ID.
 The queue class must be included. The adjacent vector/struct must be implemented with the corresponding variables declared in the struct.

 Postcondition: Will assign all connected components in the graph a district. If the graph is split into two different connected components, they
 will have different districts.

10. Delete Edge
Function Prototype:
 void Graph::deleteEdge(string, string)

 Function Description: This method will take in two string which will find two landmarks and delete the edge between the vertices and then update the districts

 Example:
 Graph g;
 g.deleteEdge("Golden Gate Bridge", "Niagara Falls")

 Precondition: Vector class must be included. The vertex struct with corresponding variables must be initialized as well as the vertices vector. The adjacent vector/struct
 must be declared and initialized with corresponding variables. The find districts method must be implemented.

 Postcondition: Will delete the edge between two adjacent vertices and update the districts in the graph.

11. Delete Vertex
Function Prototype:
 void Graph::deleteVertex(string)
 
 Function Description: This method will take a string for the name of a landMark, and delete it from the graph structure
 
 Example:
 Graph g;
 g.deleteVertex("Golden Gate Bridge")
 
 Precondition: Vector class must be included. The vertex struct with corresponding variables must be initialized as well as the vertices vector. The adjacent vector/struct
 must be declared and initialized with corresponding variables. The find districts method must be implemented.
 
 Postcondition: Will delete the vertex representing the landmark in the graph structure.



